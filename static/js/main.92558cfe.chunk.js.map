{"version":3,"sources":["img_team.jpeg","logo_ads.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","windowWidth","windowHeight","updateDimensions","bind","this","window","addEventListener","removeEventListener","innerWidth","innerHeight","setState","typeSocmed","location","href","Row","style","display","flex","flexDirection","justifyContent","Col","Container","className","fluid","src","logoAds","height","width","marginTop","Button","marginRight","variant","onClick","goToSocmed","marginLeft","imgTeam","alt","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,wRCiF5BC,E,YAxEb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,YAAa,EACbC,aAAc,GAGhB,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBAPP,E,iFAWjBC,KAAKF,mBACLG,OAAOC,iBAAiB,SAAUF,KAAKF,oB,6CAIvCG,OAAOE,oBAAoB,SAAUH,KAAKF,oB,yCAI1C,IAAIF,EAAgC,qBAAXK,OAAyBA,OAAOG,WAAa,EAClEP,EAAiC,qBAAXI,OAAyBA,OAAOI,YAAc,EAExEL,KAAKM,SAAS,CAAEV,cAAaC,mB,iCAGpBU,GAEPN,OAAOO,SAASC,KADC,OAAfF,EACqB,mDAGA,8C,+BAIjB,IAAD,OACiBP,KAAKL,MAArBC,YAER,OACE,kBAACc,EAAA,EAAD,CACEC,MAAO,CAAEC,QAAS,OAAQC,KAAM,EAAGC,cAAe,MAAOC,eAAgB,iBAEzE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,aAAaC,OAAO,GACvC,yBAAKC,IAAKC,IAASV,MAAO,CAAEW,OAAQ,IAAKC,MAAO,OAChD,wBAAIL,UAAU,sBAAd,4BACA,wBAAIA,UAAU,WAAd,qBACA,wBAAIA,UAAU,oBAAd,kIACA,kBAACD,EAAA,EAAD,CAAWN,MAAO,CAAEa,UAAW,KAC7B,kBAACd,EAAA,EAAD,CACEC,MAAO,CAAEC,QAAS,OAAQC,KAAM,EAAGC,cAAe,MAAOC,eAAgB,WAEzE,kBAACU,EAAA,EAAD,CAAQd,MAAO,CAAEe,YAAa,IAAMC,QAAQ,UAAUC,QAAS,kBAAM,EAAKC,WAAW,QAArF,aAEA,kBAACJ,EAAA,EAAD,CAAQd,MAAO,CAAEmB,WAAY,IAAMH,QAAQ,UAAUC,QAAS,kBAAM,EAAKC,WAAW,QAApF,gBAMR,kBAACb,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,aAAaC,OAAO,GACvC,yBAAKD,UAAU,qBAAqBE,IAAKW,IAASC,IAAI,mB,GAhEhDC,aCKEC,QACW,cAA7BjC,OAAOO,SAAS2B,UAEe,UAA7BlC,OAAOO,SAAS2B,UAEhBlC,OAAOO,SAAS2B,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.92558cfe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img_team.12e179d7.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/logo_ads.317d758b.png\";","import React, { Component } from 'react';\nimport imgTeam from './img_team.jpeg';\nimport logoAds from './logo_ads.png'\nimport './App.css';\nimport { Button, Container, Col, Row } from 'react-bootstrap';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      windowWidth: 0,\n      windowHeight: 0\n    };\n\n    this.updateDimensions = this.updateDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions);\n  }\n\n  updateDimensions() {\n    let windowWidth = typeof window !== \"undefined\" ? window.innerWidth : 0;\n    let windowHeight = typeof window !== \"undefined\" ? window.innerHeight : 0;\n\n    this.setState({ windowWidth, windowHeight });\n  }\n\n  goToSocmed(typeSocmed) {\n    if (typeSocmed === 'wa') {\n      window.location.href = \"https://chat.whatsapp.com/B9fSwR3Bzpq3UHM9tx3gF8\"\n\n    } else {\n      window.location.href = \"https://www.instagram.com/androdev.serang\"\n    }\n  }\n\n  render() {\n    const { windowWidth } = this.state;\n\n    return (\n      <Row\n        style={{ display: \"flex\", flex: 1, flexDirection: \"row\", justifyContent: 'space-around' }}\n      >\n        <Col>\n          <Container className=\"App-header\" fluid={true}>\n            <img src={logoAds} style={{ height: 300, width: 200 }}></img>\n            <h1 className=\"Text-Color-Primary\">Android Developer Serang</h1>\n            <h2 className=\"Tagline\">#SerangDenganKode</h2>\n            <h4 className=\"Text-Description\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce eleifend iaculis tellus, sit amet fringilla erat molestie sed. </h4>\n            <Container style={{ marginTop: 10 }} >\n              <Row\n                style={{ display: \"flex\", flex: 1, flexDirection: \"row\", justifyContent: 'center' }}\n              >\n                <Button style={{ marginRight: 50 }} variant=\"success\" onClick={() => this.goToSocmed('ig')}>Instagram</Button>\n\n                <Button style={{ marginLeft: 50 }} variant=\"success\" onClick={() => this.goToSocmed('wa')}>Whatsapp</Button>\n              </Row>\n            </Container>\n          </Container>\n        </Col>\n\n        <Col>\n          <Container className=\"App-header\" fluid={true}>\n            <img className=\"Image-Illustration\" src={imgTeam} alt=\"imgTeam\" />\n          </Container>\n        </Col>\n      </Row >\n\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}